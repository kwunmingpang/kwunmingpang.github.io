{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Introduction\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The source code of this site can be accessed\\r\\n\", _jsx(_components.a, {\n        href: \"https://github.com/kwunmingpang/kwunmingpang.github.io\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This site is built with Next js and mainly serves to act as an extension to my resume. A friend of mine was building his own blog site which inspires me to build my own portfolio site with a blog as well.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This blog will briefly talk about why I choose the Next js framework. Then goes through how I build and update content, for example this blog. After that, I will discuss how to build and deploy the site built with Next js.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Next js\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I choose to use \", _jsx(_components.a, {\n        href: \"https://nextjs.org/\",\n        children: \"Next js\"\n      }), \" for this project because Next js can be used as a \", _jsx(_components.strong, {\n        children: \"static site generator\"\n      }), \" (SSG), which basically indicates a tool that can generate static files instead of serving contents dynamically with a server. In other words, no servers are needed if there is a way to retrieve the static files generated by Next js. Consequently, I can host the genarated static html, javascript and other assets on a static hosting service.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Perfomance\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Next provides a very smooth experience for user. SSG provides a blazing fast speed when user is accessing because the files are generated at build time, the file services can simply serve the requested files. Comparing to some frameworks that run on servers that collect data and generate file after user's request, this is a great performance improvement.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Crawable text and link\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Another advantage of static site is to maximize Search engine optimization (SEO). Search engines like Google use web crawlers, which are some robot script that come to visit your site can gain some understanding about what key words, images, topics, etc. that your site contains. The search engines can later utilize the information that the web crawler gained and provide search results for their users when they are searching for certain key word.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In order for crawler to do that, the information should already be on the html file to optimize for the crawler. This is not viable for some single page applications (SPAs) because the contents are rendered in the client's side. Therefore comparing pure SPA and Next js, Next js can be optimized much better for search engines which is much more preferable.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Static site and SPA\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SPA is a javascript application that although switching to many different routes and pages in the application, the browser never actually fetch new html document from server. This can provide a much better user experience that it usually has faster respond like you are using a native application on browsers.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Although I compared Next js and SPA in the last section, Next js is actually a SPA. During the initial load, the file service will respond with the static html file. After the browser received the essential files, Next js will \", _jsx(_components.strong, {\n        children: \"rehydrate\"\n      }), \" in client side, which means that Next js will bind the javascript React objects with the DOM in your html.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The result is that the application can benefit from both the SEO optimization and the enchanced user experience from SPA.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Content and maintainance\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For most site with content, there is usually a content management system (CMS), out of which \", _jsx(_components.a, {\n        href: \"https://wordpress.com/\",\n        children: \"WordPress\"\n      }), \" is probably the most well known. However, setting up a CMS and keeping a server is not ideal for me because I want to minimize thie cost and maintaining a system on a server will certainly add to it. Therefore I choose to use mdx with \", _jsx(_components.a, {\n        href: \"https://www.npmjs.com/package/next-mdx-remote\",\n        children: \"next-mdx-remote\"\n      }), \". Using this, I am able to update content on *.mdx file, and they will be later compiled into html by the library.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This provides great flexibility and good maintainability as well because we are able to modify content without directly modifying the code, while being able to comfortably update content using markdown syntax, reuse the styling and reuse some React component as well.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As an example, in my about page, I can write syntax like this:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-markdown\",\n        children: \"### Contact\\r\\n\\r\\ncontact me at [pangkwunming@gmail.com](mailto:pangkwunming@gmail.com), or the following options as well.\\r\\n\\r\\n<FollowMe col={false}/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can see that a combination of markdown language and React component is being used. The resulting syntax is fairly easy to modify, and the functions and component can be reused as well.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Building and serving the site\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To build static site, simply by adding \", _jsx(_components.code, {\n        children: \"output: \\\"export\\\"\"\n      }), \" in the next config file.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const nextConfig = {\\r\\n    output: \\\"export\\\",\\r\\n    distDir: \\\"/docs\\\",\\r\\n    ...rest\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then simply run \", _jsx(_components.code, {\n        children: \"npx next build\"\n      }), \", Next js will handle the building of static assets.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/blog/project-portfolio:next-build.png\",\n        alt: \"assets\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can see form the figure that the output directory contains all the .html files and assets. We can test serving this directory by using \", _jsx(_components.code, {\n        children: \"npx http-server \\\"./docs\\\"\"\n      }), \" by using \", _jsx(_components.a, {\n        href: \"https://www.npmjs.com/package/http-server\",\n        children: \"http-server\"\n      }), \" package in local. Now the website should be available in port 8080 in your local machine. If everything works well, we can now simply serve the directory in a file server. In this case, I choose to use \", _jsx(_components.a, {\n        href: \"https://pages.github.com/\",\n        children: \"Github pages\"\n      }), \". Now my site is available in my github homepage at \", _jsx(_components.a, {\n        href: \"https://kwunmingpang.github.io/\",\n        children: \"https://kwunmingpang.github.io/\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Summary\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In summary, I choose to use Next js for my project because of SSG provided by Next js, in addition to the SEO optimization and enhanced user experience from SPA. I manage the content on my site using markdown files because of the maintainability and the flexibility provided by markdown templates. When the contents are updated, I build using \", _jsx(_components.code, {\n        children: \"npx next build\"\n      }), \" and serve the static directory on github pages.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I hope this can be an insipration to your project as well. I plan to post more blogs about more technical details of what is not included in this page. Hope that will help other people with their projects.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"title":"Personal portfolio site","date":"2023-11-19","category":"projects"},"scope":{}}},"__N_SSG":true}